---

- name: Fail if version not provided
  fail:
    msg: >-
      The nexus_version must be specified.
  when: nexus_version | length == 0

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_installation_dir }}/nexus-latest/etc"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/karaf"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/jetty"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/fabric"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/logback"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/scripts"
  when: nexus_version is version_compare('3.1.0', '>=')

- name: Get rest API endpoint (v < 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
  when: nexus_version is version_compare('3.8.0', '<')

- name: Get rest API endpoint (v >= 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/rest/v1/script"
  when: nexus_version is version_compare('3.8.0', '>=')

- name: Get path to database restore dir (v < 3.11.0)
  set_fact:
    nexus_db_restore_dir: "{{ nexus_data_dir }}/backup"
  when: nexus_version is version_compare('3.11.0', '<')

- name: Get path to database restore dir (v >= 3.11.0)
  set_fact:
    nexus_db_restore_dir: "{{ nexus_data_dir }}/restore-from-backup"
  when: nexus_version is version_compare('3.11.0', '>=')

- name: Create Nexus data directory
  file:
    path: "{{ nexus_data_dir }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"

- name: Update symlink nexus-latest
  file:
    path: "{{ nexus_installation_dir }}/nexus-latest"
    src: "/opt/sonatype/nexus"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    state: link
    follow: false
  register: nexus_latest_version

- name: Setup Nexus data directory
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-Dkaraf.data=.*"
    line: "-Dkaraf.data={{ nexus_data_dir }}"
  notify: nexus-container-restart

- name: Setup JVM logfile directory
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-XX:LogFile=.*"
    line: "-XX:LogFile={{ nexus_data_dir }}/log/jvm.log"
  notify: nexus-container-restart

- name: Setup Nexus JVM min heap size
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-Xms.*"
    line: "-Xms{{ nexus_min_heap_size }}"
  notify: nexus-container-restart

- name: Setup Nexus JVM max heap size
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-Xmx.*"
    line: "-Xmx{{ nexus_max_heap_size }}"
  notify: nexus-container-restart

- name: Setup Nexus JVM max direct memory
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-XX:MaxDirectMemorySize=.*"
    line: "-XX:MaxDirectMemorySize={{ nexus_max_direct_memory }}"
  notify: nexus-container-restart

- name: Create Nexus tmp/backup directory
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
  with_items:
    - "{{ nexus_tmp_dir }}"
    - "{{ nexus_backup_dir }}"

- name: Setup Nexus tmp directory
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-Djava.io.tmpdir=.*"
    line: "-Djava.io.tmpdir={{ nexus_tmp_dir }}"
  notify: nexus-container-restart

- block:
    - name: "Deploy backup restore script"
      template:
        src: "nexus-blob-restore.sh.j2"
        dest: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
        mode: 0755
    - name: "Symlink backup restore script to /sbin"
      file:
        src: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
        dest: "/sbin/nexus-blob-restore.sh"
        state: link
  when: nexus_backup_configure | bool

- name: 'Check if data directory is empty (first-time install)'
  command: "ls {{ nexus_data_dir }}"
  register: nexus_data_dir_contents
  check_mode: no
  changed_when: false

- meta: flush_handlers

- name: Prevent nexus to create any new configuration files in  {{ nexus_installation_dir }}/nexus-latest/etc
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"
    recurse: false
  with_items: "{{ nexus_app_dir_settings_dirs }}"

- name: wait-for-nexus-port
  wait_for:
    port: "{{ nexus_default_port }}"
    delay: 5

- name: Access scripts API endpoint with defined admin password
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}{{ nexus_rest_api_endpoint }}"
    method: 'HEAD'
    user: 'admin'
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_defined_password
  check_mode: no

- name: Register defined admin password for next operations
  set_fact:
    current_nexus_admin_password: "{{ nexus_admin_password }}"
  when: nexus_api_head_with_defined_password.status == 200
  no_log: true

- name: Access scripts API endpoint with default admin password
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}{{ nexus_rest_api_endpoint }}"
    method: 'HEAD'
    user: 'admin'
    password: "{{ nexus_default_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_default_password
  when: nexus_api_head_with_defined_password.status == 401

- name: Register default admin password for next operations
  set_fact:
    current_nexus_admin_password: "{{ nexus_default_admin_password }}"
  when: (nexus_api_head_with_default_password.status | default(false)) == 200

- name: Ensure current Nexus password is known
  fail:
    msg: >-
      Failed to determine current Nexus password
      (it is neither the default nor the defined password).
      If you are trying to change nexus_admin_password after first
      install, please set `-e nexus_default_admin_password=oldPassword`
      on the ansible-playbook command line.
      See https://github.com/ansible-ThoTeam/nexus3-oss/blob/master/README.md#change-admin-password-after-first-install
  when: current_nexus_admin_password is not defined

- name: Force (re-)registration of groovy scripts (purge reference dir)
  file:
    path: "{{ nexus_data_dir }}/groovy-raw-scripts"
    state: absent
  when: nexus_force_groovy_scripts_registration | default(false)

- name: Create directories to hold current groovy scripts for reference
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
  with_items:
    - "{{ nexus_data_dir }}/groovy-raw-scripts/current"
    - "{{ nexus_data_dir }}/groovy-raw-scripts/new"

- name: Archive scripts
  become: no
  archive:
    path: "{{ role_path }}/files/groovy/*"
    dest: "/tmp/nexus-upload-groovy-scripts.tar.gz"
  run_once: true
  delegate_to: localhost

- name: Upload new scripts
  unarchive:
    src: "/tmp/nexus-upload-groovy-scripts.tar.gz"
    dest: "{{ nexus_data_dir }}/groovy-raw-scripts/new/"

- name: ensure rsync is installed
  yum:
    name: rsync
    state: present
  tags:
    - skip_ansible_lint  # let yum retry

- block:
    - name: Sync new scripts to old and get differences
      shell: >
        set -o pipefail &&
        rsync -ric {{ nexus_data_dir }}/groovy-raw-scripts/new/ {{ nexus_data_dir }}/groovy-raw-scripts/current/
        | cut -d" " -f 2 | sed "s/\.groovy//g"
      register: nexus_groovy_files_changed
      check_mode: no
      changed_when: false
      # simple check on changed files kept on host
      # skip ansible lint (we don't want to use synchronize module for this)
      args:
        warn: false
        executable: /bin/bash
  rescue:
    - name: Fail with information on rsync error
      fail:
        msg: >-
          A task involving running rsync on the host just failed, most probably because rsync is not installed.
          Please make sure rsync is installed on your host or double check the above error and try again.

- name: Declare new or changed groovy scripts in nexus
  include_tasks: declare_script_each.yml
  with_items: "{{ nexus_groovy_files_changed.stdout_lines }}"

- name: Change admin password if we are still using default
  block:
    - include_tasks: call_script.yml
      vars:
        script_name: update_admin_password
        args:
          new_password: "{{ nexus_admin_password }}"

    - name: Admin password changed
      set_fact:
        current_nexus_admin_password: "{{ nexus_admin_password }}"
      no_log: true

  when: (nexus_api_head_with_default_password.status | default(false)) == 200
