---

- name: Check requirements and deprecated features/vars
  import_tasks: "requirements_and_deprecated.yml"

- name: Include OS specific variables.
  include_vars: "configure-{{ ansible_os_family }}.yml"

- name: Include OS specific selinux libs and utils if needed
  include_tasks: "selinux-{{ ansible_os_family }}.yml"
  when: ansible_selinux.status is defined and ansible_selinux.status == "enabled"

- name: Check if SystemD service is installed
  stat:
    path: /etc/systemd/system/nexus.service
  register: nexus_systemd_service_file

- name: Check if sysv service is installed
  stat:
    path: /etc/init.d/nexus
  register: nexus_sysv_service_file

- include_tasks: nexus_purge.yml
  when: nexus_purge | default(false) | bool

- name: "Digest splited blob list var"
  include_vars: blob_vars.yml
  when: nexus_blob_split | bool

- import_tasks: nexus_install.yml

- include_tasks: httpd_reverse_proxy_config.yml
  when: httpd_setup_enable | bool

- name: Configure nexus http proxy
  include_tasks: call_script.yml
  vars:
    script_name: setup_http_proxy
    args:
      with_http_proxy: "{{ nexus_with_http_proxy }}"
      http_proxy_host: "{{ nexus_http_proxy_host }}"
      http_proxy_port: "{{ nexus_http_proxy_port }}"
      http_proxy_username: "{{ nexus_http_proxy_username }}"
      http_proxy_password: "{{ nexus_http_proxy_password }}"
      with_https_proxy: "{{ nexus_with_https_proxy }}"
      https_proxy_host: "{{ nexus_https_proxy_host }}"
      https_proxy_port: "{{ nexus_https_proxy_port }}"
      https_proxy_username: "{{ nexus_https_proxy_username }}"
      https_proxy_password: "{{ nexus_https_proxy_password }}"
      proxy_exclude_hosts: "{{ nexus_proxy_exclude_hosts }}"
  when: nexus_with_http_proxy or nexus_with_https_proxy

- name: Deleting default repositories
  include_tasks: delete_repo_each.yml
  with_items:
    - maven-central
    - maven-public
    - maven-releases
    - maven-snapshots
    - nuget-group
    - nuget-hosted
    - nuget.org-proxy
  when: (nexus_data_dir_contents.stdout | length == 0) and nexus_delete_default_repos

- name: Deleting default blobstore
  include_tasks: delete_blobstore_each.yml
  with_items: >-
    {{
      {'default':{'blob': 'default'}}
      | combine(nexus_blob_names)
      | json_query("*.{name: blob}")
      | list
      | unique
    }}
  when: (nexus_data_dir_contents.stdout | length == 0) and nexus_delete_default_blobstore

- block:
    - include_tasks: setup_ldap_each.yml
      with_items: "{{ ldap_connections }}"

    - name: Create/check content selectors
      include_tasks: call_script.yml
      vars:
        script_name: create_content_selectors_from_list
        args: "{{ nexus_content_selectors }}"
      when: nexus_content_selectors | length > 0

    - name: apply defaults to privileges
      # @todo: fix with easier syntax once the flip filter is released
      # See more comments on this issue in process_repos_list.yml
      set_fact:
        nexus_privileges: >-
          {%- set result=[] -%}
          {%- for privilege in nexus_privileges -%}
            {{ result.append(_nexus_privilege_defaults | combine(privilege)) }}
          {%- endfor -%}
          {{ result | to_json | from_json }}

    - name: Create/Check blobstores
      when: nexus_restore_point is undefined
      block:

        - name: Create directories for blob stores.
          file:
            path: "{{ item['path'] }}"
            owner: "{{ nexus_os_user }}"
            group: "{{ nexus_os_group }}"
            state: directory
            recurse: "{{ nexus_blobstores_recurse_owner | default(false) | bool }}"
          when: item.path is defined
          loop: "{{ nexus_blobstores }}"

        - name: Create/Check blobstores
          include_tasks: call_script.yml
          vars:
            script_name: create_blobstores_from_list
            args: "{{ nexus_blobstores }}"
          when: nexus_blobstores | length > 0


  when: nexus_run_provisionning | default(true) | bool

- name: "Restore nexus backup"
  include_tasks: nexus-restore.yml
  when: nexus_restore_point is defined

- block:
    - name: Create/check cleanup policies
      include_tasks: call_script.yml
      vars:
        script_name: create_cleanup_policies_from_list
        args: "{{ nexus_repos_cleanup_policies }}"
      when: nexus_repos_cleanup_policies | length > 0

    - name: Apply defaults to repositories configurations and process a single list
      include_tasks: process_repos_list.yml

    - name: Create configured repositories
      include_tasks: call_script.yml
      vars:
        script_name: create_repos_from_list
        args: "{{ _nexus_repos_global_list }}"

    - name: Create/check privileges
      include_tasks: call_script.yml
      vars:
        script_name: setup_privileges_from_list
        args: "{{ nexus_privileges }}"
      when: nexus_privileges | length > 0

    - name: Create/check roles
      include_tasks: call_script.yml
      vars:
        script_name: setup_roles_from_list
        args: "{{ nexus_roles }}"
      when: nexus_roles | length > 0

    - name: Create/check local users
      include_tasks: call_script.yml
      vars:
        script_name: setup_users_from_list
        args: "{{ nexus_local_users }}"
      when: nexus_local_users | length > 0

    - name: Create/check ldap users
      include_tasks: call_script.yml
      vars:
        script_name: setup_ldap_users_from_list
        args: "{{ nexus_ldap_users }}"
      when: nexus_ldap_users | length > 0

  when: nexus_run_provisionning | default(true) | bool

- include_tasks: call_script.yml
  vars:
    script_name: setup_anonymous_access
    args:
      anonymous_access: "{{ nexus_anonymous_access }}"

- include_tasks: call_script.yml
  vars:
    script_name: setup_base_url
    args:
      base_url: "{{ nexus_public_scheme }}://{{ nexus_public_hostname }}/"

- include_tasks: call_script.yml
  vars:
    script_name: setup_realms
    args:
      nuget_api_key_realm: "{{ nexus_nuget_api_key_realm }}"
      npm_bearer_token_realm: "{{ nexus_npm_bearer_token_realm }}"
      rut_auth_realm: "{{ nexus_rut_auth_realm }}"
      ldap_realm: "{{ nexus_ldap_realm }}"
      docker_bearer_token_realm: "{{ nexus_docker_bearer_token_realm }}"

- name: Configure RUT Auth header
  include_tasks: call_script.yml
  vars:
    script_name: setup_capability
    args:
      capability_typeId: "rutauth"
      capability_enabled: true
      capability_properties:
        httpHeader: "{{ nexus_rut_auth_header }}"
  when: nexus_rut_auth_header is defined

- include_tasks: call_script.yml
  vars:
    script_name: setup_email
    args:
      email_server_enabled: "{{ nexus_email_server_enabled }}"
      email_server_host: "{{ nexus_email_server_host }}"
      email_server_port: "{{ nexus_email_server_port }}"
      email_server_username: "{{ nexus_email_server_username }}"
      email_server_password: "{{ nexus_email_server_password }}"
      email_from_address: "{{ nexus_email_from_address }}"
      email_subject_prefix: "{{ nexus_email_subject_prefix }}"
      email_tls_enabled: "{{ nexus_email_tls_enabled }}"
      email_tls_required: "{{ nexus_email_tls_required }}"
      email_ssl_on_connect_enabled: "{{ nexus_email_ssl_on_connect_enabled }}"
      email_ssl_check_server_identity_enabled: "{{ nexus_email_ssl_check_server_identity_enabled }}"
      email_trust_store_enabled: "{{ nexus_email_trust_store_enabled }}"

- name: Configure branding capability
  include_tasks: call_script.yml
  vars:
    script_name: setup_capability
    args:
      capability_typeId: "rapture.branding"
      capability_enabled: "{{ (nexus_branding_footer | length > 0) and (nexus_branding_header | length > 0) }}"
      capability_properties:
        footerHtml: "{{ nexus_branding_footer }}"
        headerHtml: "{{ nexus_branding_header }}"
        footerEnabled: "{{ nexus_branding_footer | length > 0 }}"
        headerEnabled: "{{ nexus_branding_header | length > 0 }}"

- name: Configure audit capability
  include_tasks: call_script.yml
  vars:
    script_name: setup_capability
    args:
      capability_typeId: "audit"
      capability_enabled: "{{ nexus_audit_enabled | bool }}"
      capability_properties: {}

- name: Define backup task if backup is configured
  set_fact:
    _nexus_backup_task:
      - name: db and blobstores backup
        typeId: script
        schedule_type: "{{ nexus_backup_schedule_type }}"
        cron: "{{ nexus_backup_cron }}"
        start_date_time: "{{ nexus_backup_start_date_time | default('') }}"
        weekly_days: "{{ nexus_backup_weekly_days | default([]) }}"
        monthly_days: "{{ nexus_backup_monthly_days | default([]) }}"
        taskProperties:
          language: groovy
          source: "{{ lookup('template', './templates/backup.groovy.j2') }}"
  when: nexus_backup_configure | bool

- name: Create scheduled tasks (with backup task if relevant)
  include_tasks: create_task_each.yml
  with_items: "{{ nexus_scheduled_tasks + _nexus_backup_task | default([]) }}"
  when: nexus_run_provisionning | default(true) | bool
