---

- name: Include OS specific variables.
  include_vars: "configure-{{ ansible_os_family }}.yml"

- name: Include OS specific selinux libs and utils if needed
  include: "selinux-{{ ansible_os_family }}.yml"
  when: ansible_selinux.status is defined and ansible_selinux.status == "enabled"

- name: Check if SystemD service is installed
  stat:
    path: /etc/systemd/system/nexus.service
  register: nexus_systemd_service_file

- include: nexus_purge.yml
  when: ((purge is defined) and (purge | bool))

- include: nexus_install.yml

- include: httpd_reverse_proxy_config.yml
  when: httpd_setup_enable

- include: admin_password_setup.yml

- name: Deleting default repositories
  include: delete_repo_each.yml
  with_items:
    - maven-central
    - maven-public
    - maven-releases
    - maven-snapshots
    - nuget-group
    - nuget-hosted
    - nuget.org-proxy
  when: nexus_data_dir_contents.stdout == "" and nexus_delete_default_repos

- name: Deleting default blobstore
  include: delete_blobstore_each.yml
  with_items:
    - name: default
    - name: "{{ nexus_blob_names.raw.blob }}"
    - name: "{{ nexus_blob_names.pypi.blob }}"
    - name: "{{ nexus_blob_names.docker.blob }}"
    - name: "{{ nexus_blob_names.ruby.blob }}"
    - name: "{{ nexus_blob_names.bower.blob }}"
    - name: "{{ nexus_blob_names.npm.blob }}"
    - name: "{{ nexus_blob_names.nuget.blob }}"
    - name: "{{ nexus_blob_names.mvn.blob }}"
    - name: "{{ nexus_blob_names.gitlfs.blob }}"
    - name: "{{ nexus_blob_names.yum.blob }}"
  when: nexus_data_dir_contents.stdout == "" and nexus_delete_default_blobstore

- include: setup_ldap_each.yml
  with_items: "{{ ldap_connections }}"

- include: setup_privilege_each.yml
  with_items: "{{ nexus_privileges }}"

- include: setup_role_each.yml
  with_items: "{{ nexus_roles }}"

- include: setup_user_each.yml
  with_items: "{{ nexus_local_users }}"

- name: "Digest splited blob list var"
  include_vars: blob_vars.yml
  when: nexus_blob_split

- include: create_blobstore_each.yml
  with_items: "{{ nexus_blobstores }}"
  when: nexus_restore_point is undefined

- name: "Restore nexus backup"
  include: nexus-restore.yml
  when: nexus_restore_point is defined

- include: create_repo_maven_proxy_each.yml
  with_items: "{{ nexus_repos_maven_proxy }}"

- include: create_repo_maven_hosted_each.yml
  with_items: "{{ nexus_repos_maven_hosted }}"

- include: create_repo_maven_group_each.yml
  with_items: "{{ nexus_repos_maven_group }}"

- block:
    - include: create_repo_docker_hosted_each.yml
      with_items: "{{ nexus_repos_docker_hosted }}"

    - include: create_repo_docker_proxy_each.yml
      with_items: "{{ nexus_repos_docker_proxy }}"

    - include: create_repo_docker_group_each.yml
      with_items: "{{ nexus_repos_docker_group }}"
  when: nexus_config_docker

- block:
    - include: create_repo_pypi_proxy_each.yml
      with_items: "{{ nexus_repos_pypi_proxy }}"

    - include: create_repo_pypi_hosted_each.yml
      with_items: "{{ nexus_repos_pypi_hosted }}"

    - include: create_repo_pypi_group_each.yml
      with_items: "{{ nexus_repos_pypi_group }}"
  when: nexus_config_pypi

- block:
    - include: create_repo_raw_proxy_each.yml
      with_items: "{{ nexus_repos_raw_proxy }}"

    - include: create_repo_raw_hosted_each.yml
      with_items: "{{ nexus_repos_raw_hosted }}"

    - include: create_repo_raw_group_each.yml
      with_items: "{{ nexus_repos_raw_group }}"
  when: nexus_config_raw

- block:
    - include: create_repo_rubygems_proxy_each.yml
      with_items: "{{ nexus_repos_rubygems_proxy }}"

    - include: create_repo_rubygems_hosted_each.yml
      with_items: "{{ nexus_repos_rubygems_hosted }}"

    - include: create_repo_rubygems_group_each.yml
      with_items: "{{ nexus_repos_rubygems_group }}"
  when: nexus_config_rubygems

- block:
    - include: create_repo_bower_proxy_each.yml
      with_items: "{{ nexus_repos_bower_proxy }}"

    - include: create_repo_bower_hosted_each.yml
      with_items: "{{ nexus_repos_bower_hosted }}"

    - include: create_repo_bower_group_each.yml
      with_items: "{{ nexus_repos_bower_group }}"
  when: nexus_config_bower

- block:
    - include: create_repo_npm_proxy_each.yml
      with_items: "{{ nexus_repos_npm_proxy }}"

    - include: create_repo_npm_hosted_each.yml
      with_items: "{{ nexus_repos_npm_hosted }}"

    - include: create_repo_npm_group_each.yml
      with_items: "{{ nexus_repos_npm_group }}"
  when: nexus_config_npm

- block:
    - include: create_repo_nuget_proxy_each.yml
      with_items: "{{ nexus_repos_nuget_proxy }}"
    - include: create_repo_nuget_hosted_each.yml
      with_items: "{{ nexus_repos_nuget_hosted }}"
    - include: create_repo_nuget_group_each.yml
      with_items: "{{ nexus_repos_nuget_group }}"
  when: nexus_config_nuget


- include: create_repo_gitlfs_hosted_each.yml
  with_items: "{{ nexus_repos_gitlfs_hosted }}"
  when: nexus_config_gitlfs

- block:
    - include: create_repo_yum_hosted_each.yml
      with_items: "{{ nexus_repos_yum_hosted }}"
    - include: create_repo_yum_proxy_each.yml
      with_items: "{{ nexus_repos_yum_proxy }}"
  when: nexus_config_yum

- include: call_script.yml
  vars:
    script_name: setup_anonymous_access
    args:
      anonymous_access: "{{ nexus_anonymous_access }}"

- include: call_script.yml
  vars:
    script_name: setup_base_url
    args:
      base_url: "https://{{ public_hostname }}/"

- include: call_script.yml
  vars:
    script_name: setup_http_proxy
    args:
      with_http_proxy: "{{ nexus_with_http_proxy }}"
      http_proxy_host: "{{ nexus_http_proxy_host }}"
      http_proxy_port: "{{ nexus_http_proxy_port }}"
      http_proxy_username: "{{ nexus_http_proxy_username }}"
      http_proxy_password: "{{ nexus_http_proxy_password }}"
      with_https_proxy: "{{ nexus_with_https_proxy }}"
      https_proxy_host: "{{ nexus_https_proxy_host }}"
      https_proxy_port: "{{ nexus_https_proxy_port }}"
      https_proxy_username: "{{ nexus_https_proxy_username }}"
      https_proxy_password: "{{ nexus_https_proxy_password }}"
      proxy_exclude_hosts: "{{ nexus_proxy_exclude_hosts }}"

- include: call_script.yml
  vars:
    script_name: setup_realms
    args:
      nuget_api_key_realm: "{{ nexus_nuget_api_key_realm }}"
      npm_bearer_token_realm: "{{ nexus_npm_bearer_token_realm }}"
      rut_auth_realm: "{{ nexus_rut_auth_realm }}"
      ldap_realm: "{{ nexus_ldap_realm }}"
      docker_bearer_token_realm: "{{ nexus_docker_bearer_token_realm }}"

- name: Configure RUT Auth header
  include: call_script.yml
  vars:
    script_name: setup_capability
    args:
      capability_typeId: "rutauth"
      capability_properties:
        httpHeader: "{{ nexus_rut_auth_header }}"
  when: nexus_rut_auth_header is defined

- include: call_script.yml
  vars:
    script_name: setup_email
    args:
      email_server_enabled: "{{ nexus_email_server_enabled }}"
      email_server_host: "{{ nexus_email_server_host }}"
      email_server_port: "{{ nexus_email_server_port }}"
      email_server_username: "{{ nexus_email_server_username }}"
      email_server_password: "{{ nexus_email_server_password }}"
      email_from_address: "{{ nexus_email_from_address }}"
      email_subject_prefix: "{{ nexus_email_subject_prefix }}"
      email_tls_enabled: "{{ nexus_email_tls_enabled }}"
      email_tls_required: "{{ nexus_email_tls_required }}"
      email_ssl_on_connect_enabled: "{{ nexus_email_ssl_on_connect_enabled }}"
      email_ssl_check_server_identity_enabled: "{{ nexus_email_ssl_check_server_identity_enabled }}"
      email_trust_store_enabled: "{{ nexus_email_trust_store_enabled }}"

- name: Configure branding capability
  include: call_script.yml
  vars:
    script_name: setup_capability
    args:
      capability_typeId: "rapture.branding"
      capability_properties:
        footerHtml: "{{ nexus_branding_footer }}"
        headerHtml: "{{ nexus_branding_header }}"
        footerEnabled: "{{ nexus_branding_footer != '' }}"
        headerEnabled: "{{ nexus_branding_header != '' }}"

- include: create_task_each.yml
  with_items: "{{ nexus_scheduled_tasks }}"

- name: Configure nexus backup task
  include: call_script.yml
  vars:
    script_name: create_task
    args:
      name: db and blobstores backup
      typeId: script
      cron: "{{ nexus_backup_cron }}"
      taskProperties:
        language: groovy
        source: "{{ lookup('template', './templates/backup.groovy.j2') }}"
  when: nexus_backup_configure | bool
